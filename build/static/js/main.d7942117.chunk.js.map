{"version":3,"sources":["library/requester.js","library/eventManager.js","messenger/threadLister/Thread.js","library/time.js","messenger/threadLister/ThreadList.js","messenger/messageViewer/MessageListHeader.js","messenger/messageViewer/ReceivedMessage.js","messenger/messageViewer/SentMessage.js","messenger/messageViewer/MessageList.js","messenger/messageViewer/MessageSender.js","messenger/Main.js","form/TextBox.js","form/PasswordBox.js","form/Button.js","library/formDataCollector.js","user/Signin.js","user/Signup.js","messenger/ThreadInitiator.js","messenger/InitiatorMain.js","user/InitiatorSignin.js","App.js","serviceWorker.js","index.js"],"names":["rootURL","RESPONSE_CODE","requester","GET","path","queryParams","queryString","key","url","promise","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","json","JSON","parse","responseText","status","open","setRequestHeader","window","sessionStorage","getItem","send","POST","requestBody","console","log","stringify","PullManager","pullURL","this","eventManager","data","lastEventTime","requestedEvents","eventType","eventTypes","NEW_MESSAGE","lastMessageID","MESSAGE_SEEN","TYPING","sendRequestAndPullAgain","then","response","handleEvents","events","pull","error","i","length","handleNewEvent","EventManager","eventName","eventListeners","Date","valueOf","isPulling","pullManager","id","handler","push","event","handlers","createdAt","setPullManager","setEventManager","Thread","props","handleClickOnListItem","bind","threadID","onClick","className","isActive","threadName","lastActive","lastMsg","parseInt","loadThread","stopPropagation","loadThreadIntoMessageViewer","React","Component","time","millisToTime","millis","toUTCString","ThreadList","threadUIs","threads","thread","threadUI","currentThreadID","name","lastMessage","lastActiveAt","MessageViewerHeader","ReceivedMessage","text","sentAt","SentMessage","seenAtUI","seenAt","title","MessageList","messagesUIs","messages","message","messageUI","getMessageUI","messageType","messageListType","sender","scrollToBottom","prevProps","prevState","snapshot","msgViewer","document","getElementById","scrollTop","scrollHeight","MessageSender","state","isSenderTyping","sentTypingLittleAgo","handleTyping","addEventListener","keyDownHandler","typingUI","onKeyDown","rows","preventDefault","textArea","target","value","sendMessage","typingPath","setTimeout","eventData","typingUserType","userType","setState","Main","currentThread","userName","userID","initiationURL","isSignedIn","handleNewMessage","handleMessageSeen","latestThread","href","MessageListHeader","to","getMessagePath","setLastMessageID","isReceivedAndUnseen","markAsSeen","startPulling","messageID","seeMessagePath","fetchMessages","currentMessages","TextBox","description","htmlFor","label","type","PasswordBox","Button","formDataCollector","collect","formID","elements","querySelectorAll","Signin","handleSignin","location","setItem","token","alert","Signup","handleSignup","localStorage","ThreadInitiator","useParams","reqeuster","handleCreate","InitiatorMain","initiatorName","App","exact","InitiatorSignin","children","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d7942117.chunk.js","sourcesContent":["const rootURL = \"http://localhost:8080\";\n\nconst RESPONSE_CODE = {\n    OK: 200,\n    VALIDATION_ERROR: 400,\n}\nconst requester = {\n    GET: function(path, queryParams={}) {\n        let queryString = \"\";\n        for(let key in queryParams) {\n            if(queryString !== \"\") queryString += \"&\";\n            queryString += `${key}=${queryParams[key]}`;\n        }\n        const url = `${rootURL}${path}?${queryString}`;\n        \n        let promise = new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = () => {\n                if(xhr.readyState === XMLHttpRequest.DONE) {\n                    const json = JSON.parse(xhr.responseText);\n                    if(xhr.status === RESPONSE_CODE.OK) {\n                        resolve(json);\n                    } else if(xhr.status === RESPONSE_CODE.VALIDATION_ERROR) {\n                        reject(json);\n                    } else {\n                        reject(json);\n                    }\n                }\n            }\n            xhr.open(\"GET\", url, true);\n            xhr.setRequestHeader(\"token\", window.sessionStorage.getItem(\"token\"));\n            xhr.send();\n        }) \n        return promise;\n    }, \n    POST: function(path, requestBody={}) {\n        const url = `${rootURL}${path}`;\n        console.log(url);\n\n        let promise = new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = () => {\n                if(xhr.readyState === XMLHttpRequest.DONE) {\n                    const json = JSON.parse(xhr.responseText);\n                    if(xhr.status === RESPONSE_CODE.OK) {\n                        console.log(\"Success response:\", json);\n                        resolve(json);\n                    } else if(xhr.status === RESPONSE_CODE.VALIDATION_ERROR) {\n                        console.log(\"Failed response:\", json);\n                        reject(json);\n                    } else {\n                        reject(json);\n                    }\n                }\n            }\n            xhr.open(\"POST\", url, true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n            xhr.setRequestHeader(\"token\", window.sessionStorage.getItem(\"token\"));\n            xhr.send(JSON.stringify(requestBody));\n        });\n        return promise;\n    }\n\n}\n\nexport default requester;","import requester from \"./requester\";\n\nconst pullURL = \"/listen\";\n\nclass PullManager {\n    constructor(pullURL) {\n        this.pullURL = pullURL;\n    }\n\n    setEventManager(eventManager) {\n        this.eventManager = eventManager;\n    }\n\n    pull() {\n        const data = {\n            lastEventTime: this.eventManager.lastEventTime,\n            requestedEvents: [\n                {\n                    eventType: this.eventManager.eventTypes.NEW_MESSAGE,\n                    data: {\n                        lastMessageID: this.eventManager.lastMessageID,\n                    }\n                },\n                {\n                    eventType: this.eventManager.eventTypes.MESSAGE_SEEN,\n                    data: {\n                        \n                    }\n                },\n                {\n                    eventType: this.eventManager.eventTypes.TYPING,\n                    data: {\n                        \n                    }\n                }\n            ]\n        }\n        this.sendRequestAndPullAgain(data);\n    }\n\n    sendRequestAndPullAgain(data) {\n        requester.POST(this.pullURL, data).then(\n            (response) => {\n                this.handleEvents(response.events);\n                this.pull();\n            }, \n            (error) => {\n                console.error(\"Error while pulling\", error);\n                this.pull();\n            }\n        )\n    }\n\n    handleEvents(events) {\n        for(let i = 0; i < events.length; i++) {\n            this.eventManager.handleNewEvent(events[i])\n        }\n    }\n\n}\n\nclass EventManager {\n    constructor() {\n        \n        this.eventTypes = {\n            NEW_MESSAGE: 0,\n            MESSAGE_SEEN: 1,\n            TYPING: 2,\n        }\n\n        this.eventListeners = {};\n        for(let eventName in this.eventTypes) {\n            const eventType = this.eventTypes[eventName];\n            this.eventListeners[eventType] = [];\n        }\n\n        this.lastEventTime = new Date().valueOf();\n        this.lastMessageID = null;\n        this.isPulling = false;\n    }\n\n    setPullManager(pullManager){\n        this.pullManager = pullManager;\n    }\n\n    setLastMessageID(id) {\n        console.log(\"Setting last message id:\", id);\n\n        this.lastMessageID = id;\n    }\n\n    /**\n     * \n     * @param eventType: int\n     * @param handler: function(eventData)\n     */\n    addEventListener(eventType, handler) {\n        this.eventListeners[eventType].push(handler);\n    }\n\n    handleNewEvent(event) {\n        const handlers = this.eventListeners[event.eventType];\n\n        if(this.lastEventTime < event.createdAt) this.lastEventTime = event.createdAt; \n        \n        for(let i = 0; i < handlers.length; i++) {\n            handlers[i](event.data);\n        }\n    }\n\n    startPulling() {\n        if(this.isPulling) return;\n        pullManager.pull(); \n        this.isPulling = true;\n    }\n}\n\nconst pullManager = new PullManager(pullURL);\nconst eventManager = new EventManager();\n\neventManager.setPullManager(pullManager);\npullManager.setEventManager(eventManager);\n\nexport default eventManager;","import React from 'react';\nimport '../style.css';\n\nclass Thread extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClickOnListItem = this.handleClickOnListItem.bind(this);\n    }\n\n    render() {\n        return (\n            <div id={\"threadListItem-\" + this.props.threadID} onClick={this.handleClickOnListItem}  className={`thread-list-item list-group-item list-group-item-action ${this.props.isActive ? \"active\": \"\"}`}>\n                <div className=\"d-flex w-100 justify-content-between\">\n                <h5 className=\"mb-1\">{this.props.threadName}</h5>\n                <small>{this.props.lastActive}</small>\n                </div>\n                <p className=\"mb-1\">{this.props.lastMsg}</p>\n            </div>\n        );\n    }\n\n    handleClickOnListItem(event) {\n        const threadID = parseInt(this.props.threadID);\n        const threadName = this.props.threadName;\n\n        this.loadThread(threadID, threadName);\n        event.stopPropagation();\n    }\n\n    loadThread(threadID, threadName) {\n        console.log(\"Showing thread\", threadID, threadName);\n        \n        this.props.loadThreadIntoMessageViewer(threadID, threadName);\n    }\n\n}\n\nexport default Thread;","const time = {\n    millisToTime: function(millis) {\n        if(millis === null) return '-';\n        return new Date(parseInt(millis)).toUTCString();\n    }\n}\n\nexport default time;","import React from 'react';\nimport '../style.css';\nimport Thread from './Thread';\nimport time from '../../library/time';\n\nclass ThreadList extends React.Component {\n\n    render() {\n        const threadUIs = [];\n        for(let i = 0; i < this.props.threads.length; i++) {\n            const thread = this.props.threads[i];\n            const threadUI = (\n                <Thread \n                    key={thread.id} \n                    isActive={this.props.currentThreadID === thread.id} \n                    threadID={thread.id} threadName={thread.name} \n                    lastMsg={thread.lastMessage} \n                    lastActive={time.millisToTime(thread.lastActiveAt)} \n                    loadThreadIntoMessageViewer={this.props.loadThreadIntoMessageViewer}\n                />\n            )\n            threadUIs.push(threadUI);\n        }\n        return (\n            <div id=\"thread-list\" className=\"list-group\">\n                {threadUIs}\n            </div>\n        );\n    }\n}\n\nexport default ThreadList;","import React from 'react';\nimport '../style.css';\n\nclass MessageViewerHeader extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>{this.props.threadName}</h1>\n            </div>\n        );\n    }\n}\n\nexport default MessageViewerHeader;","import React from 'react';\nimport '../style.css';\n\nclass ReceivedMessage extends React.Component {\n    render() {\n        return (\n            <div className=\"received-message\">\n                <div className=\"message-body\">\n                    {this.props.text}\n                </div>\n                <small>Sent at <b>{this.props.sentAt}</b></small>\n            </div>\n        );\n    }\n}\n\nexport default ReceivedMessage;","import React from 'react';\nimport '../style.css';\n\nclass SentMessage extends React.Component {\n    render() {\n        let seenAtUI;\n        if(this.props.status === \"unseen\") seenAtUI = \"\";\n        else if(this.props.status === \"delivered\") seenAtUI = <b>Delivered</b>\n        else if(this.props.status === \"seen\") seenAtUI = <small>Seen at <b>{this.props.seenAt}</b></small>\n\n        return (\n            <div className=\"sent-message\">\n                <div className=\"message-body\" title={this.props.sentAt}>\n                    {this.props.text}\n                </div>\n                {seenAtUI}\n            </div>\n        );\n    }\n}\n\nexport default SentMessage;","import React from 'react';\n\nimport time from '../../library/time';\n\nimport '../style.css';\nimport ReceivedMessage from './ReceivedMessage';\nimport SentMessage from './SentMessage';\n\nclass MessageList extends React.Component {\n\n    render() {\n        console.log(\"rendering MessageList. props:\", this.props);\n\n        const messagesUIs = [];\n        for(let i = 0; i < this.props.messages.length; i++) {\n            const message = this.props.messages[i];\n            \n            let messageUI = this.getMessageUI(message);\n            messagesUIs.push(messageUI);\n        }\n        return (\n            <div id=\"messageList\" >\n                {messagesUIs}\n            </div>\n        );\n    }\n\n    getMessageUI(message){\n        let messageType;\n        const SIGNED_IN_USER = 0;\n        const INITIATOR = 1;\n        const MESSAGE_TYPE_SENT = 0;\n        const MESSAGE_TYPE_RECEIVED = 1;\n        if(this.props.messageListType === \"SIGNED_IN_USER\"){\n            if(message.sender === SIGNED_IN_USER) messageType = MESSAGE_TYPE_SENT;\n            else if(message.sender === INITIATOR) messageType = MESSAGE_TYPE_RECEIVED;\n            else console.error(\"wrong sender\", message);\n        } else if(this.props.messageListType === \"INITIATOR\"){\n            if(message.sender === SIGNED_IN_USER) messageType = MESSAGE_TYPE_RECEIVED;\n            else if(message.sender === INITIATOR) messageType = MESSAGE_TYPE_SENT;\n            else console.error(\"wrong sender\", message);\n        } else {\n            console.error(\"Wrong messageListType attribute:\", this.props.messageListType)\n        }\n\n        let messageUI;\n        if(messageType === MESSAGE_TYPE_SENT) messageUI = <SentMessage key={message.id} id={message.id} status={message.status} text={message.text} seenAt={time.millisToTime(message.seenAt)} sentAt={time.millisToTime(message.sentAt)}/>\n        else if(messageType === MESSAGE_TYPE_RECEIVED) messageUI = <ReceivedMessage key={message.id} id={message.id} status={message.status} text={message.text} sentAt={time.millisToTime(message.sentAt)} />\n        return messageUI;\n    }\n\n    componentDidMount() {\n        this.scrollToBottom();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.scrollToBottom();\n    }\n\n    scrollToBottom() {\n        const msgViewer = document.getElementById(\"messageList\");\n        msgViewer.scrollTop = msgViewer.scrollHeight;\n    }\n    \n    \n}\n\nexport default MessageList;","import React from 'react';\n\nimport requester from '../../library/requester';\n\nimport '../style.css';\nimport eventManager from '../../library/eventManager';\n\nclass MessageSender extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isSenderTyping: false,\n        }\n\n        this.sentTypingLittleAgo = false;\n\n        this.handleTyping = this.handleTyping.bind(this);\n        eventManager.addEventListener(eventManager.eventTypes.TYPING, this.handleTyping);\n        // event handler binding\n        this.keyDownHandler = this.keyDownHandler.bind(this);\n    }\n\n    render() {\n        let typingUI = \"\";\n        if(this.state.isSenderTyping === true) typingUI = <p className=\"typing\">Sender Typing...</p>\n        return (\n            <div>\n                {typingUI}\n                <textarea id=\"msgToSend\" onKeyDown={this.keyDownHandler} className=\"form-control\" rows=\"2\"></textarea>\n            </div>\n        );\n    }\n\n    keyDownHandler(event) {\n        if(event.key === \"Enter\") {\n            event.preventDefault(); //to prevent showing enter in the textArea\n\n            const textArea = event.target;\n            const message = textArea.value;\n            textArea.value = \"\";\n\n            this.sendMessage(message);\n        } else {\n            if(this.sentTypingLittleAgo) return;\n            this.sentTypingLittleAgo = true;\n\n            const typingPath = `/threads/${this.props.currentThreadID}/typing`;\n            requester.POST(typingPath, {});\n\n            setTimeout(()=> this.sentTypingLittleAgo = false, 5000);\n        }\n    }\n\n    handleTyping(eventData) {\n        if(eventData.typingUserType === this.props.userType) return;\n\n        this.setState({isSenderTyping: true});\n        setTimeout(() => this.setState({isSenderTyping: false}), 5000);\n    }\n\n    sendMessage(message) {\n        console.log(\"Sending message:\", message);\n\n        const currentThreadID = this.props.currentThreadID;\n        const path = `/threads/${currentThreadID}/new-message`;\n        requester.POST(path, {text: message}).then(\n            (response) => {\n                console.log(response.message);\n            }, \n            (error) => {\n                console.error(\"Error sending message\");\n            }\n        )\n    }\n}\n\nexport default MessageSender;","import React from 'react';\nimport { IoIosCopy } from \"react-icons/io\";\n\nimport requester from '../library/requester';\nimport eventManager from '../library/eventManager';\n\nimport './style.css';\nimport ThreadList from './threadLister/ThreadList';\nimport MessageListHeader from './messageViewer/MessageListHeader';\nimport MessageList from './messageViewer/MessageList';\nimport MessageSender from './messageViewer/MessageSender';\nimport { Link } from 'react-router-dom';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n\n        //currentThread = the thread shown in the messageViewer\n        this.state = {\n            currentThread: {\n                id: null,\n                name: \"\",\n                messages: [],\n            },\n            threads: [],\n        };\n\n        this.userName = window.sessionStorage.getItem(\"userName\");\n        this.userID = window.sessionStorage.getItem(\"userID\");\n        this.initiationURL = `http://localhost.com:3000/initiate/${this.userID}`;\n\n        if(this.userName == null) {\n            this.isSignedIn = false;\n            return;\n        } else {\n            this.isSignedIn = true;\n        }\n\n        this.loadThreadIntoMessageViewer = this.loadThreadIntoMessageViewer.bind(this);\n        this.handleNewMessage = this.handleNewMessage.bind(this);\n        this.handleMessageSeen = this.handleMessageSeen.bind(this);\n        eventManager.addEventListener(eventManager.eventTypes.NEW_MESSAGE, this.handleNewMessage);\n        eventManager.addEventListener(eventManager.eventTypes.MESSAGE_SEEN, this.handleMessageSeen);\n\n        requester.GET(\"/threads\").then(\n            (response) => {\n                const latestThread = response.threads[0];\n                this.loadThreadIntoMessageViewer(latestThread.id, latestThread.name);\n                this.setState({\n                    threads: response.threads,\n                })\n            },\n            (error) => {\n                console.error(\"Error fetching thread list\");\n            }\n        )\n    }\n\n    render() {\n        if(!this.isSignedIn) return <h1>Please <Link to=\"/signin\">Sign in</Link></h1>\n\n        return (\n            <div id=\"messenger-main\" className=\"row\">\n                <div className=\"col-md-3\">\n                    <div className=\"vh-100\">\n                        <h1>{this.userName}</h1>\n                        <p id=\"newThreadURL\"> <a href={this.initiationURL}>{this.initiationURL}</a> <IoIosCopy/></p>\n                        <ThreadList currentThreadID={this.state.currentThread.id} threads={this.state.threads} loadThreadIntoMessageViewer={this.loadThreadIntoMessageViewer}/>\n                    </div>\n                </div>\n                <div className=\"col-md-8\">\n                    <div className=\"vh-100\">\n                        <MessageListHeader threadName={this.state.currentThread.name}/>\n                        <MessageList threadID={this.state.currentThread.id} messages={this.state.currentThread.messages} messageListType=\"SIGNED_IN_USER\"/>\n                        <MessageSender currentThreadID={this.state.currentThread.id} userType=\"SIGNED_IN\"/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n    }\n\n    fetchMessages(threadID, threadName) {\n        console.log(\"fetching messages of threadID\", threadID);\n        if(threadID === null) return;\n\n        const getMessagePath = `/threads/${threadID}`;\n        requester.GET(getMessagePath, {}).then(\n            (response) =>  {\n                if(response.messages.length > 0){\n                    const lastMessage = response.messages[response.messages.length - 1];\n                    eventManager.setLastMessageID(lastMessage.id);\n\n                    if(this.isReceivedAndUnseen(lastMessage)) this.markAsSeen(threadID, lastMessage.id);\n                    if(this.isSignedIn) eventManager.startPulling();\n                }\n                this.setState({\n                    currentThread: {\n                        id: threadID,\n                        name: threadName,\n                        messages: response.messages,\n                    },\n                });\n            }, \n            (error) => {\n                console.error(\"Error fetching messages\");\n            }\n        )\n    }\n\n    markAsSeen(threadID, messageID){\n        const seeMessagePath = `/threads/${threadID}/messages/${messageID}/see-message`;\n        requester.POST(seeMessagePath, {});\n    }\n\n    isReceivedAndUnseen(message) {\n        const SIGNED_IN_USER = 0;\n        const INITIATOR = 1;\n        if(message.sender === INITIATOR) {\n            if(message.status === \"unseen\") return true;\n            else return false;\n        } else {\n            return false;\n        }\n    }\n\n    loadThreadIntoMessageViewer(threadID, threadName) {\n        this.fetchMessages(threadID, threadName);\n    }\n    \n    handleNewMessage(eventData) {\n        const messages = eventData.messages;\n        console.log(\"new messages:\", messages);\n\n        const lastMessage = messages[messages.length - 1];\n        if(messages.length > 0) eventManager.setLastMessageID(lastMessage.id);\n        if(this.isReceivedAndUnseen(lastMessage)) this.markAsSeen(this.state.currentThread.id, lastMessage.id);\n\n        for(let i = 0; i < messages.length; i++) {\n            if(messages[i].threadID !== this.state.currentThread.id) continue;\n            this.state.currentThread.messages.push(messages[i]);\n        }\n        this.setState({});\n    }\n\n    handleMessageSeen(eventData) {\n        if(this.state.currentThread.id !== eventData.threadID) return;\n        const lastMessageID = eventData.lastMessageID;\n\n        const currentMessages = this.state.currentThread.messages;\n        for(let i = currentMessages.length - 1; i >= 0; i--) {\n            if(currentMessages[i].status === \"seen\") break;\n            if(currentMessages[i].id <= lastMessageID) {\n                currentMessages[i].status = \"seen\";\n                currentMessages[i].seenAt = eventData.seenAt;\n            }\n        }\n\n        this.setState({});\n    }\n}\n\nexport default Main;","import React from 'react';\nimport './style.css'\n\nclass TextBox extends React.Component {\n    render() {\n        let description = \"\"\n        if(this.props.description) {\n            description = <small className=\"description\">{this.props.description}</small>\n        }\n        return (\n            <div className=\"form-group\">\n                <label htmlFor={this.props.id}>{this.props.label} {description}</label>\n                <input className=\"form-control\" type=\"text\" id={this.props.id}/>\n                <small className=\"errorMessage\"></small>\n            </div>\n        )\n    }\n}\n\nexport default TextBox;","import React from 'react';\nimport './style.css'\n\nclass PasswordBox extends React.Component {\n    render() {\n        let description = \"\"\n        if(this.props.description) {\n            description = <small className=\"description\">{this.props.description}</small>\n        }\n\n        return (\n            <div className=\"form-group\">\n                <label htmlFor={this.props.id}>{this.props.label} {description}</label>\n                <input className=\"form-control\" type=\"password\" id={this.props.id}/>\n                <small className=\"errorMessage\"></small>\n            </div>\n        )\n    }\n}\n\nexport default PasswordBox;","import React from 'react';\nimport './style.css'\n\nclass Button extends React.Component {\n    render() {\n        return (\n            <div className=\"form-group\">\n                <button className=\"btn btn-outline-success btn-block\" onClick={this.props.onClick}>{this.props.label}</button>\n            </div>\n        )\n    }\n}\n\nexport default Button;","const formDataCollector = {\n    collect: function(formID) {\n        const data = {};\n\n        const elements = document.querySelectorAll(`#${formID} .form-control`);\n        for(let i = 0; i < elements.length; i++) {\n            data[elements[i].id] = elements[i].value;\n        }\n\n        console.log(\"form Data:\", data);\n        return data;\n    }\n}\n\nexport default formDataCollector;","import React from 'react';\nimport {Link} from 'react-router-dom'\n\nimport './style.css'\nimport TextBox from '../form/TextBox'\nimport PasswordBox from '../form/PasswordBox'\nimport Button from '../form/Button'\nimport formDataCollector from '../library/formDataCollector'\nimport requester from '../library/requester';\n\nclass Signin extends React.Component {\n    constructor(props)  {\n        super(props);\n\n        this.handleSignin = this.handleSignin.bind(this);\n    }\n    render() {\n        if(window.sessionStorage.getItem(\"token\") !== null) {\n            window.location.href = \"/\";\n            return;\n        }\n        \n        return (\n            <div id=\"signinForm\" className=\"box shadow p-3 mb-5 bg-white rounded w-25\">\n                <h1>Signin</h1>\n                <TextBox id=\"email\" label=\"Email Address\"/>\n                <PasswordBox id=\"password\" label=\"Password\"/>\n                <Button onClick={this.handleSignin} label=\"Signin\"/><br/>\n                <div className=\"alreadySignedUp\">No Account? <Link to=\"/signup\">Signup</Link></div>\n            </div>\n        );\n    }\n\n    handleSignin() {\n        const data =  formDataCollector.collect(\"signinForm\");\n        requester.POST(\"/signin\", data).then(\n            (response) => {\n                window.sessionStorage.setItem(\"token\", response.token);\n                window.sessionStorage.setItem(\"userID\", response.userID);\n                window.sessionStorage.setItem(\"userName\", response.userName);\n                alert(response.message); \n                window.location.href = \"/\";\n            },\n            (data) => {alert(data.message);}\n        )\n    }\n}\n\nexport default Signin;","import React from 'react';\nimport {Link} from 'react-router-dom'\n\nimport './style.css'\nimport TextBox from '../form/TextBox'\nimport PasswordBox from '../form/PasswordBox'\nimport Button from '../form/Button'\nimport formDataCollector from '../library/formDataCollector'\nimport requester from '../library/requester';\n\nclass Signup extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleSignup = this.handleSignup.bind(this);\n    }\n    render() {\n        if(window.localStorage.getItem(\"token\") !== null) {\n            window.location.href = \"/\";\n            return;\n        }\n\n        return (\n            <div id=\"signupForm\" className=\"box shadow p-3 mb-5 bg-white rounded w-25\">\n                <h1>Signup</h1>\n                <TextBox id=\"name\" label=\"Name\"/>\n                <TextBox id=\"email\" label=\"Email Address\"/>\n                <PasswordBox id=\"password\" label=\"Password\" description=\"At least 8 character long\"/>\n                <Button onClick={this.handleSignup} label=\"Signup\"/><br/>\n                <div className=\"alreadySignedUp\">Already have an account? <Link to=\"/signin\">Signin</Link></div>\n            </div>\n        );\n    }\n\n    handleSignup() {\n        const data = formDataCollector.collect(\"signupForm\");\n        requester.POST(\"/signup\", data).then(\n            (response) => {\n                console.log(response); \n                alert(\"Signup successful\");\n                window.location.href = \"/signin\";\n            },\n            (error) => {\n                console.error(error); \n                alert(\"Failed to signup\");\n            }\n        )\n    }\n}\n\nexport default Signup;","import React from 'react';\nimport './style.css';\n\nimport TextBox from '../form/TextBox'\nimport PasswordBox from '../form/PasswordBox'\nimport Button from '../form/Button'\nimport formDataCollector from '../library/formDataCollector'\nimport reqeuster from '../library/requester';\nimport { useParams } from 'react-router-dom';\n\nfunction ThreadInitiator (props){\n    let {userID} = useParams();\n    return (\n        <div id=\"initiatorForm\" className=\"box shadow p-3 mb-5 bg-white rounded w-25\">\n            <h1>Initiate New Thread</h1>\n            <TextBox id=\"threadName\" label=\"Thread Name\"/>\n            <TextBox id=\"initiatorName\" label=\"Initiator PseudoName\"/>\n            <PasswordBox id=\"secretKey\" label=\"Secret Key\"/>\n            <Button onClick={()=>handleCreate()} label=\"Create\"/>\n        </div>\n    );\n    \n    function handleCreate() {\n        const data = formDataCollector.collect(\"initiatorForm\");\n        data.userID = parseInt(userID);\n        reqeuster.POST(\"/threads/create\", data).then(\n            (response) => {\n                alert(\"Thread creation successful\");\n                window.location.href = `/initiator/signin`;\n            }, \n            (response) => {\n                alert(\"Failed to create thread.\");\n            })\n    }\n}\n\nexport default ThreadInitiator;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport requester from '../library/requester';\nimport eventManager from '../library/eventManager';\n\nimport './style.css';\nimport MessageList from './messageViewer/MessageList';\nimport MessageSender from './messageViewer/MessageSender';\n\nclass InitiatorMain extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            messages: [],\n        };\n\n        this.handleNewMessage = this.handleNewMessage.bind(this);\n        this.handleMessageSeen = this.handleMessageSeen.bind(this);\n        eventManager.addEventListener(eventManager.eventTypes.NEW_MESSAGE, this.handleNewMessage);\n        eventManager.addEventListener(eventManager.eventTypes.MESSAGE_SEEN, this.handleMessageSeen);\n\n        this.threadID = window.sessionStorage.getItem(\"threadID\");\n        if(this.threadID == null) this.isSignedIn = false;\n        else this.isSignedIn = true;\n        this.threadID = parseInt(this.threadID);\n\n        const path = `/threads/${this.threadID}`;\n        requester.GET(path, {}).then(\n            (response) =>  {\n                if(response.messages.length > 0){\n                    const lastMessage = response.messages[response.messages.length - 1];\n                    eventManager.setLastMessageID(lastMessage.id);\n\n                    if(this.isReceivedAndUnseen(lastMessage)) this.markAsSeen(this.threadID, lastMessage.id);\n                    if(this.isSignedIn) eventManager.startPulling();\n                }\n                this.setState({\n                    messages: response.messages\n                });\n            }, \n            (error) => {\n                console.error(\"Error fetching messages\");\n            }\n        )\n    }\n    render() {\n        if(!this.isSignedIn) return <h1>Please <Link to=\"/initator/signin\">Signin</Link></h1>\n        return (\n            <div id=\"initiator-main\" >\n                <div className=\"vh-100\">\n                    <MessageList threadID={this.threadID} messages={this.state.messages} messageListType=\"INITIATOR\"/>\n                    <MessageSender currentThreadID={this.threadID} userType=\"INITIATOR\"/>\n                </div>\n            </div>\n        )\n    }\n\n    markAsSeen(threadID, messageID){ //todo: unify with main\n        const seeMessagePath = `/threads/${threadID}/messages/${messageID}/see-message`;\n        requester.POST(seeMessagePath, {});\n    }\n\n    isReceivedAndUnseen(message) {\n        const SIGNED_IN_USER = 0;\n        const INITIATOR = 1;\n        if(message.sender === SIGNED_IN_USER) {\n            if(message.status === \"unseen\") return true;\n            else return false;\n        } else {\n            return false;\n        }\n    }\n\n    handleNewMessage(eventData) {\n        const messages = eventData.messages;\n        console.log(\"new messages:\", messages);\n\n        const currentThreadID = parseInt(this.threadID);\n\n        const lastMessage = messages[messages.length - 1];\n        if(messages.length > 0) eventManager.setLastMessageID(lastMessage.id);\n        if(this.isReceivedAndUnseen(lastMessage)) this.markAsSeen(currentThreadID, lastMessage.id);\n\n        \n        for(let i = 0; i < messages.length; i++) {\n            console.log(messages[i].threadID, currentThreadID);\n            if(messages[i].threadID !== currentThreadID) continue;\n            this.state.messages.push(messages[i]);\n        }\n        console.log(\"initiator state\", this.state);\n        this.setState({});\n    }\n\n    handleMessageSeen(eventData) {\n        console.log(\"hanldeMessageSeen()\");\n        if(this.threadID !== eventData.threadID) return;\n        const lastMessageID = eventData.lastMessageID;\n\n        const currentMessages = this.state.messages;\n        for(let i = currentMessages.length - 1; i >= 0; i--) {\n            if(currentMessages[i].status === \"seen\") break;\n            if(currentMessages[i].id <= lastMessageID) {\n                currentMessages[i].status = \"seen\";\n                currentMessages[i].seenAt = eventData.seenAt;\n            }\n        }\n\n        this.setState({});\n    }\n}\n\nexport default InitiatorMain;","import React from 'react';\n\nimport './style.css'\nimport TextBox from '../form/TextBox'\nimport PasswordBox from '../form/PasswordBox'\nimport Button from '../form/Button'\nimport formDataCollector from '../library/formDataCollector'\nimport requester from '../library/requester';\n\nclass Signin extends React.Component {\n    constructor(props)  {\n        super(props);\n\n        this.handleSignin = this.handleSignin.bind(this);\n    }\n    render() {\n        \n        return (\n            <div id=\"initiatorSigninForm\" className=\"box shadow p-3 mb-5 bg-white rounded w-25\">\n                <h1>Initiator Signin</h1>\n                <TextBox id=\"threadID\" label=\"Thread ID\"/>\n                <PasswordBox id=\"secretKey\" label=\"Secret Key\"/>\n                <Button onClick={this.handleSignin} label=\"Signin\"/><br/>\n            </div>\n        );\n    }\n\n    handleSignin() {\n        const data =  formDataCollector.collect(\"initiatorSigninForm\");\n        requester.POST(\"/initiator/signin\", data).then(\n            (response) => {\n                // window.localStorage.setItem(\"token\", response.token);\n                // window.localStorage.setItem(\"initiatorName\", response.initiatorName);\n                // window.localStorage.setItem(\"threadID\", response.threadID);\n                window.sessionStorage.setItem(\"token\", response.token);\n                window.sessionStorage.setItem(\"initiatorName\", response.initiatorName);\n                window.sessionStorage.setItem(\"threadID\", response.threadID);\n                alert(response.message); \n                window.location.href = `/initiator-message/${response.threadID}`;\n            },\n            (data) => {alert(data.message);}\n        )\n    }\n}\n\nexport default Signin;","import React from 'react';\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Main from './messenger/Main';\nimport Signin from './user/Signin';\nimport Signup from './user/Signup';\nimport ThreadInitiator from './messenger/ThreadInitiator';\nimport InitiatorMain from './messenger/InitiatorMain';\nimport InitiatorSignin from './user/InitiatorSignin';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Main />\n          </Route>\n          <Route path=\"/signin\">\n            <Signin />\n          </Route>\n          <Route path=\"/signup\">\n            <Signup />\n          </Route>\n          <Route path=\"/initiator/signin\">\n            <InitiatorSignin />\n          </Route>\n          <Route path=\"/initiate/:userID\" children={<ThreadInitiator/>}/>\n          <Route path=\"/initiator-message/:threadID\" children={<InitiatorMain/>}/>\n          </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}